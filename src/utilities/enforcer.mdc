---
description: Cung cấp các "chốt chặn" an toàn, ngăn agent vi phạm quy tắc (vd: code khi blueprint chưa duyệt, mark done khi thiếu test).
globs:
alwaysApply: false
---
# 🛡️ Enforcement Utility (v1)
Provides runtime safeguards that prevent the agent from performing workflow steps when project gates are unmet.

## Scope
This rule is **trigger-loaded** by core components (orchestrator / context-loader) whenever the agent attempts to:
1. Generate or modify production source code.
2. Mark a task's status as `done` or `review`.

## Enforcement Checks
1. **Blueprint Gate**
   - Every feature/task that involves code changes **MUST** reference a blueprint file which has reached at least **Gate 1: Approved**.
   - If `docs/blueprints/<feature>/*.yaml` is missing or has `gate_status < 1`, the agent must halt coding and display:
     > "🛑 Blueprint gate not passed: Please finalise and approve the blueprint before coding."

2. **Knowledge Sources Integrity** (redundant check to context-loader)
   - For the active task, all paths in `knowledge_sources` must exist. Missing → block coding and request user action.

3. **Test & Documentation Completeness**
   - When transitioning a task's status to `done` or `review`, ensure:
     a. **Unit/integration tests** exist in the corresponding test directory and cover ≥ 80 % of new/changed lines (heuristic via diff + coverage report).
     b. **Docs** in `docs/features/<feature>/architecture` or `docs/development` have been updated (last modified time ≥ last code commit of the task).
   - Failing either → block status change, inform the user and suggest autogenerated stubs.

## How to Use
```
enforcer.check_before_coding(task_id)
enforcer.check_before_mark_done(task_id)
```

These functions throw a `🚫 EnforcementError` containing a human-readable reason if a rule is violated.
