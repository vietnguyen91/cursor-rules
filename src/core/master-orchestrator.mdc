---
description: Orchestrate the entire workflow by **determining a single active mode** based on the project state.
priority: 95
alwaysApply: true
---
# üß≠ Master Orchestrator (v4 - Deterministic)
Orchestrate the entire workflow by **determining a single active mode** based on the project state.

```yaml
# Rule Metadata
rule_type: ORCHESTRATION_RULES
priority: 1
scope: ["all-projects", "workflow-control"]
requires: []
conflicts: []
activation_conditions:
  - always_active: true
  - first_to_load: true
description: "Master workflow orchestrator with deterministic mode detection"
version: "4.0.0"
```

## ü§ñ **Mode Detection Logic (Website Clone Enhanced)**
The agent MUST check these conditions by **iterating through all feature-specific index files** and **analyzing user requests**.

### 0. Check for `Multi-Source Analysis` Mode (NEW - Highest Priority for Multi-Source Projects)
*   `IF` user request contains keywords: `"multi-source"`, `"analyze all sources"`, `"compare sources"`, `"aggregate data"` **OR**
*   `IF` user mentions multiple data sources for analysis **OR**
*   `IF` existing project shows evidence of multiple sources but lacks multi-source analysis:
    *   `THEN` **CURRENT_MODE = Multi-Source Analysis**. Exit detection.

### 0.1. Check for `Target Analysis` Mode (Single Source Projects)
*   `IF` user request contains keywords: `"clone website"`, `"analyze target"`, `"scrape from"` **OR**
*   `IF` user provides a new target website URL for analysis **OR**
*   `IF` a target website is mentioned but `docs/targets/{website}.analysis.md` does **NOT** exist **OR**
*   `IF` user explicitly requests target analysis for an existing website:
    *   `THEN` **CURRENT_MODE = Target Analysis**. Exit detection.

### 1. Check for `Brainstorming` Mode (Manual or Pending Blueprint)
*   `IF` the user explicitly starts a brainstorming session (command contains the keyword `brainstorm` **OR**
    the shared `orchestrator_state.brainstorm_requested` flag is `true`) **OR**
*   `IF` a feature directory exists in `docs/features/*/requirements/` **BUT**
    there is **no** corresponding blueprint file in `docs/blueprints/*.blueprint.yaml` **AND**
    the root `docs/tasks/task-index.json` does **NOT** yet list tasks for that feature:
    *   `THEN` **CURRENT_MODE = Brainstorming**. Exit detection.

### 2. Check for `Initializing` Mode
-   `IF` `docs/tasks/task-index.json` does not exist:
-   `THEN` **CURRENT_MODE = Initializing**. Exit detection.

### 3. Check for `Content Sync` Mode (NEW - Production Operations)
*   `IF` user request contains keywords: `"sync content"`, `"monitor content"`, `"production sync"`, `"content monitoring"` **OR**
-   `READ` root `docs/tasks/task-index.json`.
-   **`FOR EACH`** feature in `features` array:
    -   `READ` the feature-specific index file from `feature.path`.
    -   `IF` any task has `status: "deployed"` OR `status: "production"` OR `status: "sync"`:
        -   `THEN` **CURRENT_MODE = Content Sync**. Exit detection.

### 4. Check for `Integration Testing` Mode (NEW - Testing Phase)
*   `IF` user request contains keywords: `"test scraping"`, `"integration test"`, `"validate scraping"`, `"e2e test"` **OR**
-   `READ` root `docs/tasks/task-index.json`.
-   **`FOR EACH`** feature in `features` array:
    -   `READ` the feature-specific index file from `feature.path`.
    -   `IF` any task has `status: "ready-for-testing"` OR `status: "testing"`:
        -   `THEN` **CURRENT_MODE = Integration Testing**. Exit detection.

### 5. Check for `Developing` Mode
-   `READ` root `docs/tasks/task-index.json`.
-   **`FOR EACH`** feature in `features` array:
    -   `READ` the feature-specific index file from `feature.path`.
    -   `IF` any task has `status: "approved"` OR `status: "developing"`:
        -   `THEN` **CURRENT_MODE = Developing**. Exit detection.

### 6. Check for `Documenting` Mode
-   `READ` root `docs/tasks/task-index.json`.
-   **`FOR EACH`** feature in `features` array:
    -   `READ` the feature-specific index file from `feature.path`.
    -   `IF` any task has `status: "done"` OR `status: "review"` AND docs are out-of-sync:
        -   `THEN` **CURRENT_MODE = Documenting**. Exit detection.

### 7. Default to `Architecture Planning` Mode (Enhanced Planning)
-   `IF` none of the above conditions are met:
-   `THEN` **CURRENT_MODE = Architecture Planning**. This is the default state for a ready project with target analysis complete but no active tasks.

## üõ† Core Workflow (Updated)
1.  **DETERMINE CURRENT_MODE** using the Mode Detection Logic above.
2.  **LOAD CONTEXT** via `context-loader`, passing in the determined `CURRENT_MODE`.
3.  **EXECUTE** user request within the context of the single active mode.
4.  **UPDATE PROGRESS** in `task-index.json` and relevant files.
5.  **TRANSITION** if necessary, by updating state that the next detection cycle will pick up.

## üîÑ Mode Transition Philosophy
**Modes are flexible workflows, NOT linear cycles.**

### Dynamic Transitions (Website Clone Enhanced):
- **Target Analysis ‚Üí Architecture Planning**: When analysis complete + legal approved
- **Architecture Planning ‚Üí Developing**: When blueprint approved + tasks defined
- **Developing ‚Üí Integration Testing**: When core functionality complete + ready for testing
- **Integration Testing ‚Üí Content Sync**: When all tests pass + ready for deployment
- **Content Sync ‚Üí Documenting**: When sync system stable + documentation needed
- **Developing ‚Üí Target Analysis**: When new target website discovered or requirements change
- **Integration Testing ‚Üí Developing**: If critical bugs discovered requiring fixes
- **Content Sync ‚Üí Integration Testing**: If major issues requiring retesting
- **Any Mode ‚Üí Target Analysis**: When user requests to clone new website
- **Any Mode ‚Üí Initializing**: When project structure is broken or reset

### Triggers for Mode Changes (Website Clone Enhanced):
1. **User explicit requests**: 
   - "Clone website X" ‚Üí Target Analysis Mode
   - "Analyze target site" ‚Üí Target Analysis Mode
   - "Test scraping functionality" ‚Üí Integration Testing Mode
   - "Sync content" ‚Üí Content Sync Mode
   - "Monitor production" ‚Üí Content Sync Mode

2. **Project state changes**: 
   - Task status updates (approved‚Üídeveloping, testing‚Üídeployed)
   - Missing target analysis files ‚Üí Target Analysis Mode
   - Blueprint approvals ‚Üí Architecture Planning Mode
   - Test completion ‚Üí Content Sync Mode

3. **Validation failures**: 
   - Missing target analysis ‚Üí back to Target Analysis
   - Failed tests ‚Üí back to Developing 
   - Sync failures ‚Üí stay in Content Sync with error handling
   - Legal compliance issues ‚Üí back to Target Analysis

4. **Context requirements**: 
   - Need MCP tools for specific tasks
   - Different utilities/rules for current work phase
   - Specialized templates for scraping vs general development

## üîí Enforcement
- Prohibit code generation if blueprint is not Gate 1.
- Prohibit marking task complete if tests/docs are missing.
- Violation ‚áí warn & auto-switch to appropriate mode.
Detailed in `utilities/enforcer.mdc`

## üìÇ Mode-Specific Rules Mapping (Multi-Source Enhanced)
Each mode MUST load its corresponding rule file:
- **Initializing Mode** ‚Üí `modes/initializing-mode.mdc`
- **Multi-Source Analysis Mode** ‚Üí `modes/multi-source-analysis-mode.mdc` *(NEW)*
- **Target Analysis Mode** ‚Üí `modes/target-analysis-mode.mdc` *(NEW)*
- **Brainstorming Mode** ‚Üí `modes/brainstorming-mode.mdc`
- **Architecture Planning Mode** ‚Üí `modes/architecture-planning-mode.mdc` *(MULTI-SOURCE ENHANCED)*
- **Developing Mode** ‚Üí `modes/developing-mode.mdc` *(ENHANCED)*
- **Integration Testing Mode** ‚Üí `modes/integration-testing-mode.mdc` *(NEW)*
- **Content Sync Mode** ‚Üí `modes/content-sync-mode.mdc` *(MULTI-SOURCE ENHANCED)*
- **Documenting Mode** ‚Üí `modes/documenting-mode.mdc`

The `context-loader` is responsible for loading these based on `CURRENT_MODE`. These mode files contain:
- Specific behaviors and constraints for that mode
- Required utilities to trigger-load
- MCP tools configuration for that mode
- Output format guidelines
- Transition criteria
- Quality gates and success metrics

## üìè Documentation Freshness Heuristic
For a given feature, docs are considered **out-of-sync** when **any** source code file under that feature's directory tree has a last-modified timestamp newer than the most recent `.md` file in `docs/features/<feature>/`.

Implementation sketch:
```
latest_code_time = max(mtime of src/** for feature)
latest_doc_time  = max(mtime of docs/features/<feature>/**/*.md)
return latest_code_time > latest_doc_time
```

## üîÑ Auto-Transition: `proposed` ‚Üí `developing`
Before executing user intent that references a task in `proposed` status:
1. Verify task's `knowledge_sources` exist (context-loader handles this).
2. If valid, update status to `developing` **and persist** in `task-index.json`.
3. Log the transition for audit.
4. If missing specs, remain in Planning; context-loader already notifies user.
