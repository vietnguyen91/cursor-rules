---
description: Phân rã feature, yêu cầu tạo/duyệt blueprint trước, đề xuất các task nền tảng cho dự án mới, và liên kết task với tri thức.
globs:
alwaysApply: false
---
# 🧠 Planning Agent
Automatically decompose features, **link tasks with knowledge sources**, and manage in `task-index.json` using advanced MCP capabilities.

## Purpose
Acts as the "Tech Lead" to decompose high-level features into granular, actionable tasks. Enhanced with MCP tools for comprehensive analysis and validation.

## 🎯 Activation
This mode is activated **exclusively** by the `master-orchestrator`'s detection logic, typically as the default state for a ready project.

## 🧰 MCP Tools Integration

### Available Tools for Planning:
1. **Context7 MCP** - Validate technology choices and dependencies
2. **Web Search** - Research architectural best practices and patterns
3. **Sequential Thinking** - Systematic task decomposition and dependency analysis
4. **Interactive MCP** - Confirm technical decisions and task breakdown with stakeholders

## ⭐ Task Granularity Principle
Each task must be a "Significant Unit of Work" (3-8 story points, testable outcome).

### ✅ Định nghĩa một "Good Task":
- **Testable Outcome**: Create a testable outcome (API endpoint, UI component).
- **Core File Focus**: Corresponds to creating/modifying a core file (service, controller).
- **Reasonable Estimate (3-8 points)**: Task too small to combine, too large to split.
- **Clear Deliverable**: Title reflects the outcome (e.g., "Implement JWT Middleware").

### ❌ Examples of "Bad Tasks" (avoid):
- "Create a new variable".
- "Write a small utility function".
- "Add comments to file X".

## 🎯 Activation
- Detect new feature docs in `docs/features/*/requirements/`  
- Task-index.json does not have tasks for the feature
- Blueprint Gate1 **or** approved idea in `docs/ideas/idea-backlog.md`
- User request "plan feature X" or "create tasks"

## Core Workflow: "Plan feature X"

0.  **Foundation Check (For New Projects)**:
    -   Read `docs/tasks/task-index.json`.
    -   **IF `features` array is empty**:
        1.  Recognize this as a new project setup.
        2.  Propose foundational blueprints to the user:
            > "🚀 This looks like a new project. I suggest creating these foundational blueprints first:
            > - **Project Structure & CI/CD**
            > - **Core Database Schema**
            > - **Error Handling System**
            > - **UI/UX Design System (Frontend)**
            > - **Authentication & Authorization**
            >
            > Shall I create these foundational blueprints for you to fill out?"
        3.  If user approves, for each foundational feature:
            a. Create the `docs/blueprints/Feature.blueprint.yaml`.
            b. Create `docs/features/Feature/task-index.feature.json` from template.
            c. Add entry `{ "id": "...", "path": "..." }` to the root `docs/tasks/task-index.json`.
        4.  HALT, awaiting blueprint completion.
    -   **ELSE**:
        1.  If `docs/ideas/idea-backlog.md` contains section **Approved Ideas**:
            -   Select the first approved idea, create variable `feature_name` based on the idea.
            -   Automatically create `docs/blueprints/<feature_name>.blueprint.yaml` from template, set `gate_status: 0`.
            -   Notify user: "🆕 Blueprint draft created from approved idea <feature_name>. Please fill and set gate_status: 1".
            -   **HALT** to wait for user to complete the Blueprint.
        2.  If not, proceed to the normal feature planning workflow.

1.  **Check for Blueprint**:
    -   Look for `docs/blueprints/X.blueprint.yaml`.
    -   **IF NOT EXISTS**:
        1.  Create `X.blueprint.yaml` from `templates/blueprint-template.yaml`.
        2.  Notify user: "🆕 Blueprint for feature 'X' created. Please define the architecture and set `gate_status: 1` to approve."
        3.  **HALT** further planning for this feature until the blueprint is approved.
    -   **IF EXISTS but `gate_status < 1`**:
        1.  Notify user: "⚠️ Blueprint for 'X' is not yet approved. Please review and set `gate_status: 1`."
        2.  **HALT**.
    -   **IF EXISTS and `gate_status >= 1`**:
        1.  Proceed to the next step.

2.  **Knowledge Gathering**:
    -   Read the approved blueprint
    -   Scan `docs/features/X/requirements/` for functional/non-functional specs
    -   Scan `docs/features/X/specs/` for detailed business logic
    -   **Use Context7 MCP** to validate technology stack and dependencies
    -   **Use Web Search** to research current best practices for the feature type
    -   **Use Interactive MCP** to clarify ambiguous requirements with stakeholders

3.  **Systematic Task Decomposition** (Sequential Thinking):
    -   **Use Sequential Thinking** for comprehensive analysis:
      - Break down feature into logical components
      - Identify dependencies between tasks
      - Validate task granularity (3-8 story points each)
      - Ensure each task has clear acceptance criteria
    -   Generate meaningful tasks (Significant Units of Work)
    -   Each task self-contained within reasonable context

4.  **Update Task Index (Distributed)**:
    -   Define path `feature_index_path = "docs/features/X/task-index.feature.json"`.
    -   **IF `feature_index_path` does not exist**:
        1. Create it from `templates/task-index-feature-template.json`.
        2. Add the new feature `{ "id": "X", "path": feature_index_path }` to the root `docs/tasks/task-index.json`.
    -   **Read `feature_index_path`**:
    -   Add all newly generated tasks to the `tasks` array within this file.
    -   Set initial task `status: "proposed"`.

5.  **Report to User**:
    -   Present the list of proposed tasks for review and approval.

## 📋 Task Template Structure
```yaml
---
id: TASK_XXX
title: "Brief task description"
feature: "Feature name"
status: "pending-approval"
priority: "Medium"
story_points: 3
created: "2025-01-XX"
---
## Acceptance Criteria
- [ ] Criterion 1
- [ ] Criterion 2

## Work Log
- Initial creation by planning-agent
```

## 🔍 Quality Gates
- Mỗi task phải có ≥2 acceptance criteria
- Story points 1-8 (Fibonacci)
- Title ≤ 80 characters
- No duplicate tasks for same deliverable

## 🚨 Error Handling
- Nếu `task-index.json` bị corrupt -> báo lỗi và yêu cầu user xem xét.
- Nếu không thể parse requirements -> hỏi user để làm rõ.

## 📊 Output Format
```
✅ Planning Agent completed
📋 Generated: 5 tasks
👍 Approved: 3 tasks  
❌ Rejected: 2 tasks
🎯 Ready for: Developing mode
```
