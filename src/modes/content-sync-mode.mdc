---
description:
globs:
alwaysApply: false
---
# 🔄 Content Sync Mode (Production Management)
Advanced content synchronization and monitoring system for production website clones with intelligent automation.

## 🎯 Activation
- Tasks with status "deployed" requiring content synchronization
- User requests "sync content", "monitor content", or "production sync"
- Transition from Integration Testing Mode when ready for production
- Automated activation for scheduled sync operations
- Keyword triggers: "sync", "content", "monitor", "production"

## 🧰 MCP Tools Integration

### Available Tools for Content Sync:
1. **Playwright** - Automated content monitoring, change detection, live testing
2. **Web Search** - Best practices for content synchronization strategies
3. **Interactive MCP** - Sync schedule confirmation, issue resolution validation
4. **Sequential Thinking** - Complex sync strategy optimization and troubleshooting

## 🔄 Multi-Source Content Synchronization Framework

### Phase 1: Multi-Source Sync Strategy Management

#### 1.1 Coordinated Multi-Source Sync Scheduling
```yaml
multi_source_sync_schedules:
  source_specific_schedules:
    rophim_me:
      new_movies:
        frequency: "every_2_hours"
        priority: "high"
        content_types: ["movies", "episodes"]
      
      categories:
        frequency: "daily"
        priority: "medium"
        content_types: ["categories", "genres"]
        
    phimmoi_sale:
      new_episodes:
        frequency: "every_30_minutes"
        priority: "critical"
        content_types: ["episodes", "video_sources"]
        
      movie_updates:
        frequency: "every_4_hours"
        priority: "medium"
        content_types: ["movie_details", "ratings"]
        
    imdb_api:
      metadata_enrichment:
        frequency: "weekly"
        priority: "low"
        content_types: ["metadata", "cast", "ratings"]
        
  coordinated_sync_strategy:
    conflict_detection: "real_time"
    resolution_delay: "5_minutes" # Wait for multiple sources
    batch_processing: true
    cross_validation: true
```

#### 1.2 Multi-Source Change Detection & Conflict Monitoring
```javascript
// Advanced multi-source change detection
const multiSourceChangeDetection = {
  source_specific_fingerprinting: {
    rophim_me: {
      method: "content_hash",
      algorithms: ["sha256"],
      scope: ["title", "description", "poster", "episodes"]
    },
    
    phimmoi_sale: {
      method: "content_hash", 
      algorithms: ["sha256"],
      scope: ["title", "episodes", "video_sources"]
    }
  },
  
  cross_source_validation: {
    content_correlation: {
      title_matching: {
        similarity_threshold: 0.85,
        normalization: "remove_special_chars"
      },
      
      metadata_correlation: {
        year_validation: true,
        duration_validation: true,
        episode_count_validation: true
      }
    }
  },
  
  real_time_conflict_detection: {
    field_level_monitoring: true,
    threshold_based_alerts: {
      title_difference: 0.7,
      description_difference: 0.5,
      metadata_mismatch: 0.8
    },
    
    automatic_conflict_queue: {
      enabled: true,
      batch_size: 50,
      processing_interval: "5_minutes"
    }
  }
}
```

#### 1.3 Intelligent Conflict Resolution Engine
```javascript
// Real-time conflict resolution system
class MultiSourceConflictResolver {
  async resolveConflicts(conflicts) {
    const resolutionStrategies = {
      title: this.resolveTitleConflicts,
      description: this.resolveDescriptionConflicts,
      episodes: this.resolveEpisodeConflicts,
      metadata: this.resolveMetadataConflicts
    };
    
    for (const conflict of conflicts) {
      const resolver = resolutionStrategies[conflict.field];
      if (resolver) {
        const resolution = await resolver(conflict);
        await this.applyResolution(conflict, resolution);
      } else {
        await this.escalateToManualReview(conflict);
      }
    }
  }
  
  async resolveTitleConflicts(conflict) {
    // Strategy: Prefer canonical form, then most reliable source
    const canonicalTitle = this.extractCanonicalTitle(conflict.values);
    if (canonicalTitle) return canonicalTitle;
    
    return this.selectBySourceReliability(conflict.values, conflict.sources);
  }
  
  async resolveDescriptionConflicts(conflict) {
    // Strategy: Merge unique content, prefer longer descriptions
    return this.mergeUniqueContent(conflict.values);
  }
  
  async resolveEpisodeConflicts(conflict) {
    // Strategy: Union of episodes, validate episode numbers
    return this.mergeEpisodeLists(conflict.values);
  }
}
```

#### 1.3 Smart Sync Algorithms
```javascript
// Advanced sync strategies
const syncStrategies = {
  incremental_sync: {
    description: "Only sync changed content",
    efficiency: "high",
    resource_usage: "low",
    use_cases: ["regular_updates", "large_datasets"]
  },
  
  full_sync: {
    description: "Complete content refresh",
    efficiency: "low",
    resource_usage: "high",
    use_cases: ["data_corruption_recovery", "major_updates"]
  },
  
  hybrid_sync: {
    description: "Combination of incremental and selective full sync",
    efficiency: "medium",
    resource_usage: "medium",
    use_cases: ["production_systems", "mixed_content_types"]
  }
}
```

### Phase 2: Real-Time Multi-Source Monitoring & Consistency

#### 2.1 Multi-Source Health & Consistency Monitoring
```yaml
monitoring_targets:
  source_websites:
    - name: "primary_source"
      url: "{{PRIMARY_SOURCE_URL}}"
      health_checks:
        - type: "availability"
          frequency: "every_5_minutes"
          timeout: 10000  # 10 seconds
        - type: "content_validation"
          frequency: "every_30_minutes"
          validation_rules: ["selector_exists", "content_not_empty"]
        - type: "performance"
          frequency: "every_15_minutes"
          metrics: ["response_time", "page_load_time"]
          
  api_endpoints:
    - name: "content_api"
      url: "{{API_ENDPOINT_URL}}"
      authentication: "{{API_AUTH_TYPE}}"
      health_checks:
        - type: "response_validation"
          expected_status: 200
          expected_schema: "{{API_SCHEMA}}"
```

#### 2.2 Cross-Source Data Consistency Monitoring
```javascript
// Multi-source data consistency assessment
const multiSourceConsistencyMetrics = {
  cross_source_completeness: {
    source_coverage: {
      rophim_me: {
        required_fields: ["title", "description", "year", "poster"],
        coverage_threshold: 0.95
      },
      phimmoi_sale: {
        required_fields: ["title", "episodes", "video_sources"],
        coverage_threshold: 0.90
      }
    },
    
    canonical_completeness: {
      master_record_fields: ["canonical_title", "merged_description", "year"],
      threshold: 0.98,
      alert_on_incomplete_fusion: true
    }
  },
  
  cross_source_accuracy: {
    field_consistency_checks: {
      title_consistency: {
        similarity_threshold: 0.85,
        normalization_required: true
      },
      
      year_consistency: {
        exact_match_required: true,
        tolerance: 0 // No tolerance for year differences
      },
      
      episode_count_consistency: {
        tolerance: 2, // Allow 2 episode difference
        investigate_threshold: 5
      }
    }
  },
  
  data_lineage_validation: {
    source_attribution: {
      every_field_must_have_source: true,
      confidence_score_required: true,
      timestamp_tracking: true
    },
    
    conflict_resolution_audit: {
      resolution_strategy_logged: true,
      manual_review_flagged: true,
      confidence_threshold: 0.8
    }
  },
  
  real_time_consistency: {
    cross_source_sync_lag: {
      max_acceptable_lag: "15_minutes",
      alert_threshold: "30_minutes"
    },
    
    conflict_emergence_rate: {
      baseline_rate: 0.05, // 5% conflict rate is normal
      alert_threshold: 0.15, // Alert if >15%
      investigation_threshold: 0.25
    }
  }
}
```

#### 2.3 Multi-Source Quality Scoring
```javascript
// Advanced quality scoring for multi-source content
class MultiSourceQualityScorer {
  calculateOverallQuality(canonicalRecord) {
    const qualityFactors = {
      source_diversity: this.calculateSourceDiversity(canonicalRecord),
      conflict_resolution_quality: this.calculateResolutionQuality(canonicalRecord),
      data_freshness: this.calculateFreshnessScore(canonicalRecord),
      completeness: this.calculateCompletenessScore(canonicalRecord),
      consistency: this.calculateConsistencyScore(canonicalRecord)
    };
    
    const weights = {
      source_diversity: 0.2,
      conflict_resolution_quality: 0.25,
      data_freshness: 0.2,
      completeness: 0.2,
      consistency: 0.15
    };
    
    return this.weightedAverage(qualityFactors, weights);
  }
  
  calculateSourceDiversity(record) {
    // Higher score for content from multiple reliable sources
    const sourceCount = record.source_tracking.contributing_sources.length;
    const reliabilitySum = record.source_tracking.contributing_sources
      .map(source => this.getSourceReliability(source))
      .reduce((sum, reliability) => sum + reliability, 0);
      
    return Math.min(1.0, (sourceCount * reliabilitySum) / 3.0);
  }
  
  calculateResolutionQuality(record) {
    // Score based on conflict resolution success and confidence
    const conflictCount = record.source_tracking.conflict_count || 0;
    const confidence = record.source_tracking.data_confidence || 1.0;
    
    if (conflictCount === 0) return 1.0;
    
    // Penalize unresolved conflicts
    const unresolvedPenalty = conflictCount * 0.1;
    return Math.max(0.0, confidence - unresolvedPenalty);
  }
}
```

#### 2.3 Performance Monitoring
```yaml
performance_metrics:
  sync_performance:
    - metric: "sync_duration"
      target: "< 30 minutes"
      alert_threshold: "45 minutes"
      
    - metric: "pages_per_minute"
      target: "> 100"
      alert_threshold: "< 50"
      
    - metric: "error_rate"
      target: "< 1%"
      alert_threshold: "> 5%"
      
  system_resources:
    - metric: "cpu_usage"
      target: "< 70%"
      alert_threshold: "> 85%"
      
    - metric: "memory_usage"
      target: "< 80%"
      alert_threshold: "> 90%"
      
    - metric: "disk_space"
      target: "> 20% free"
      alert_threshold: "< 10% free"
```

### Phase 3: Advanced Content Management

#### 3.1 Content Lifecycle Management
```yaml
content_lifecycle:
  stages:
    discovery:
      description: "New content detection"
      triggers: ["new_urls_found", "rss_updates", "api_notifications"]
      actions: ["validate_content", "extract_metadata", "queue_for_processing"]
      
    processing:
      description: "Content extraction and transformation"
      actions: ["extract_content", "validate_data", "enrich_metadata", "generate_thumbnails"]
      quality_gates: ["completeness_check", "format_validation"]
      
    publication:
      description: "Content made available to users"
      actions: ["store_in_database", "update_search_index", "invalidate_cache"]
      notifications: ["api_webhooks", "admin_dashboard"]
      
    maintenance:
      description: "Ongoing content updates"
      triggers: ["source_content_changed", "scheduled_refresh"]
      actions: ["update_existing_content", "maintain_relationships"]
      
    archival:
      description: "Old content management"
      triggers: ["content_age_threshold", "source_removal"]
      actions: ["move_to_archive", "update_references", "cleanup_resources"]
```

#### 3.2 Content Deduplication
```javascript
// Advanced deduplication strategies
const deduplicationSystem = {
  content_similarity: {
    algorithm: "cosine_similarity",
    threshold: 0.85,
    fields: ["title", "content_body"],
    action: "merge_duplicates"
  },
  
  url_canonicalization: {
    normalize_urls: true,
    ignore_parameters: ["utm_source", "utm_medium", "ref"],
    case_insensitive: true
  },
  
  metadata_matching: {
    match_fields: ["published_date", "author", "category"],
    fuzzy_matching: true,
    confidence_threshold: 0.9
  }
}
```

#### 3.3 Multi-Source Content Aggregation
```yaml
multi_source_config:
  sources:
    primary_source:
      weight: 1.0
      priority: "high"
      content_types: ["all"]
      
    secondary_source:
      weight: 0.8
      priority: "medium"
      content_types: ["articles", "news"]
      
    backup_source:
      weight: 0.6
      priority: "low"
      content_types: ["fallback_content"]
      
  conflict_resolution:
    strategy: "weighted_priority"
    rules:
      - "prefer_newer_content"
      - "prefer_higher_quality"
      - "prefer_primary_source"
      
  content_merging:
    enabled: true
    merge_strategies:
      - "combine_tags"
      - "merge_categories"
      - "aggregate_metadata"
```

### Phase 4: Automation & Orchestration

#### 4.1 Intelligent Job Scheduling
```javascript
// Advanced job scheduling system
const jobScheduler = {
  queue_management: {
    priority_queues: ["critical", "high", "normal", "low"],
    max_concurrent_jobs: 10,
    job_timeout: 3600, // 1 hour
    retry_strategy: "exponential_backoff"
  },
  
  resource_optimization: {
    adaptive_scheduling: true,
    resource_monitoring: true,
    load_balancing: true,
    peak_hour_adjustments: {
      "09:00-18:00": "reduced_frequency",
      "18:00-09:00": "normal_frequency"
    }
  },
  
  failure_handling: {
    automatic_retry: true,
    max_retries: 3,
    fallback_sources: true,
    error_escalation_threshold: 5
  }
}
```

#### 4.2 Smart Alerting System
```yaml
alerting_config:
  alert_channels:
    - type: "email"
      recipients: ["admin@example.com", "dev-team@example.com"]
      severity_threshold: "warning"
      
    - type: "slack"
      webhook_url: "{{SLACK_WEBHOOK}}"
      channel: "#content-sync"
      severity_threshold: "error"
      
    - type: "sms"
      recipients: ["{{ADMIN_PHONE}}"]
      severity_threshold: "critical"
      
  alert_rules:
    sync_failure:
      condition: "sync_error_rate > 10%"
      severity: "error"
      message: "Content sync error rate exceeded threshold"
      
    source_unavailable:
      condition: "source_downtime > 30 minutes"
      severity: "critical"
      message: "Primary content source unavailable"
      
    data_quality_degradation:
      condition: "data_quality_score < 0.9"
      severity: "warning"
      message: "Data quality metrics below acceptable threshold"
```

#### 4.3 Recovery & Rollback Mechanisms
```javascript
// Disaster recovery and rollback system
const recoverySystem = {
  backup_strategies: {
    incremental_backups: {
      frequency: "hourly",
      retention: "7 days",
      compression: true
    },
    
    full_backups: {
      frequency: "daily",
      retention: "30 days",
      encryption: true
    },
    
    snapshot_backups: {
      frequency: "before_major_sync",
      retention: "indefinite",
      metadata_included: true
    }
  },
  
  rollback_capabilities: {
    point_in_time_recovery: true,
    selective_rollback: true,
    automated_rollback_triggers: [
      "data_corruption_detected",
      "sync_error_rate_critical",
      "user_complaints_threshold"
    ]
  }
}
```

### Phase 5: Analytics & Optimization

#### 5.1 Content Performance Analytics
```yaml
analytics_dashboard:
  content_metrics:
    - metric: "content_freshness"
      calculation: "avg_age_of_active_content"
      target: "< 4 hours"
      
    - metric: "sync_efficiency"
      calculation: "successful_syncs / total_sync_attempts"
      target: "> 95%"
      
    - metric: "content_coverage"
      calculation: "synced_content / available_content"
      target: "> 98%"
      
  performance_metrics:
    - metric: "sync_throughput"
      calculation: "pages_synced_per_hour"
      trend_analysis: true
      
    - metric: "resource_utilization"
      calculation: "avg_cpu_memory_usage"
      optimization_recommendations: true
      
  user_impact_metrics:
    - metric: "content_availability"
      calculation: "uptime_percentage"
      target: "99.9%"
      
    - metric: "content_accuracy"
      calculation: "user_reported_issues / total_content"
      target: "< 0.1%"
```

#### 5.2 Predictive Analytics
```javascript
// AI-powered sync optimization
const predictiveOptimization = {
  content_demand_forecasting: {
    algorithm: "time_series_analysis",
    factors: ["user_traffic", "seasonal_patterns", "trending_topics"],
    optimization: "preemptive_content_sync"
  },
  
  failure_prediction: {
    algorithm: "anomaly_detection",
    indicators: ["response_time_degradation", "error_rate_increase", "resource_exhaustion"],
    actions: ["proactive_scaling", "fallback_activation"]
  },
  
  resource_optimization: {
    algorithm: "machine_learning",
    inputs: ["historical_usage", "content_patterns", "system_performance"],
    outputs: ["optimal_sync_schedules", "resource_allocation"]
  }
}
```

## 📊 Operational Dashboard

### Real-Time Status Overview
```yaml
dashboard_sections:
  system_health:
    widgets:
      - "sync_status_indicator"
      - "source_availability_map"
      - "error_rate_gauge"
      - "performance_metrics_chart"
      
  content_overview:
    widgets:
      - "content_freshness_histogram"
      - "sync_queue_status"
      - "content_categories_breakdown"
      - "recent_sync_activity_log"
      
  performance_monitoring:
    widgets:
      - "throughput_trend_chart"
      - "resource_utilization_meters"
      - "response_time_distribution"
      - "sync_duration_timeline"
      
  alerts_management:
    widgets:
      - "active_alerts_list"
      - "alert_history_timeline"
      - "escalation_status"
      - "resolution_tracking"
```

## 🚦 Quality Gates

### Content Sync Health Criteria:
- [ ] All primary sources responding (≥99% availability)
- [ ] Sync success rate ≥95%
- [ ] Data quality score ≥90%
- [ ] Content freshness within targets
- [ ] System resources within limits
- [ ] No critical alerts active

### Continuous Operation Readiness:
- [ ] Automated monitoring active
- [ ] Alert systems operational
- [ ] Backup systems verified
- [ ] Recovery procedures tested
- [ ] Performance optimization active
- [ ] Documentation current

## 🔄 Transition Rules
- **→ Documenting Mode**: When sync system stable + documentation needed
- **→ Integration Testing Mode**: If major issues requiring testing
- **→ Developing Mode**: If system modifications needed
- **← Continuous Sync**: Normal operational state with periodic optimizations

## 📊 Success Metrics
- Content synchronization uptime ≥99.9%
- Average content age <4 hours
- Sync error rate <1%
- User-reported content issues <0.1%
- System resource efficiency optimization

## 🚨 Error Handling & Incident Response

### Automated Response Procedures
```yaml
incident_response:
  severity_levels:
    critical:
      examples: ["primary_source_down", "data_corruption", "sync_completely_failed"]
      response_time: "< 5 minutes"
      actions: ["activate_backup_sources", "notify_on_call", "initiate_rollback"]
      
    high:
      examples: ["sync_error_rate_high", "performance_degradation", "partial_data_loss"]
      response_time: "< 15 minutes"
      actions: ["investigate_root_cause", "apply_temporary_fixes", "monitor_closely"]
      
    medium:
      examples: ["individual_sync_failures", "minor_performance_issues"]
      response_time: "< 1 hour"
      actions: ["log_for_analysis", "retry_failed_operations", "schedule_investigation"]
      
    low:
      examples: ["minor_data_quality_issues", "optimization_opportunities"]
      response_time: "< 24 hours"
      actions: ["add_to_backlog", "analyze_trends", "plan_improvements"]
```

## 🎯 Advanced Features

### Intelligent Content Curation
- **Content Quality Scoring**: Automatic quality assessment
- **Relevance Filtering**: Focus on high-value content
- **Trending Detection**: Prioritize popular/viral content
- **Spam/Low-Quality Filtering**: Automatic content filtering

### Multi-Region Sync Management
- **Geographic Distribution**: Sync to multiple regions
- **Latency Optimization**: Region-specific sync strategies
- **Failover Management**: Automatic region failover
- **Content Localization**: Region-specific content adaptation

### Advanced Integration Capabilities
- **Webhook Integration**: Real-time notifications
- **API Gateway**: External system integration
- **Message Queue Integration**: Event-driven architecture
- **Third-party Tool Integration**: Monitoring and analytics tools
